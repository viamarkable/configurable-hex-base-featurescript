FeatureScript 2411;
import(path : "onshape/std/geometry.fs", version : "2411.0");
import(path : "onshape/std/common.fs", version : "2411.0");

const MY_SIZE_BOUNDS = { (inch) : [0.1, 10, 1000] } as LengthBoundSpec;
const MY_OCTAGON_BOUNDS = { (inch) : [0.1, 0.5, 5] } as LengthBoundSpec;
const MY_STRUT_BOUNDS = { (inch) : [0.05, 0.0625, 0.5] } as LengthBoundSpec;

export enum Excess
{
    annotation { "Name" : "Right" }
    RIGHT,
    annotation { "Name" : "Left" }
    LEFT
}

annotation { "Feature Type Name" : "Configurable Octagon Base" }

export const octBase = defineFeature(function(context is Context, id is Id, definition is map)
    precondition
    {
        annotation { "Name" : "Base Length:" }
        isLength(definition.length, MY_SIZE_BOUNDS);

        annotation { "Name" : "Base Width:" }
        isLength(definition.width, MY_SIZE_BOUNDS);

        annotation { "Name" : "Base Height:" }
        isLength(definition.height, MY_OCTAGON_BOUNDS);

        annotation { "Name" : "Octagon Side Length:" }
        isLength(definition.sideLength, MY_OCTAGON_BOUNDS);

        annotation { "Name" : "Strut Width:" }
        isLength(definition.strutWidth, MY_STRUT_BOUNDS);

        annotation { "Name" : "Excess Material" }
        definition.excess is Excess;
    }
    {
        var baseLength = definition.length;
        var baseWidth = definition.width;
        var baseHeight = definition.height;
        var octagonLength = definition.sideLength;        
        var strut = definition.strutWidth;
        
        // creates straight lines
        var sketchStraight = newSketch(context, id + "sketchStraight", {
                "sketchPlane" : qCreatedBy(makeId("Top"), EntityType.FACE)
            });
            
            skLineSegment(sketchStraight, "line1", {
                        "start" : vector(octagonLength / 2, 0 * octagonLength),
                        "end" : vector(octagonLength / 2, (octagonLength / 2) - (0.001 * inch))
                    });
            skLineSegment(sketchStraight, "line2", {
                        "start" : vector(0 * octagonLength, octagonLength / 2),
                        "end" : vector((octagonLength / 2) - (0.001 * inch), octagonLength / 2)
                    });
            skLineSegment(sketchStraight, "line4", {
                        "start" : vector((octagonLength / 2) + (octagonLength / sqrt(2)) + (0.001 * inch), octagonLength / 2 + octagonLength / sqrt(2)),
                        "end" : vector((octagonLength * 1.5) + (octagonLength / sqrt(2)) - (0.001 * inch), octagonLength / 2 + octagonLength / sqrt(2))
                    });
            skLineSegment(sketchStraight, "line5", {
                        "start" : vector(octagonLength / 2 + octagonLength / sqrt(2), (octagonLength / 2) + (octagonLength / sqrt(2)) + (0.001 * inch)),
                        "end" : vector(octagonLength / 2 + octagonLength / sqrt(2), (octagonLength * 1.5) + (octagonLength / sqrt(2)) - (0.001 * inch))
                    });
            skLineSegment(sketchStraight, "line6", {
                        "start" : vector((octagonLength / 2) + (octagonLength / sqrt(2)) + (0.001 * inch), octagonLength * 1.5 + octagonLength / sqrt(2)),
                        "end" : vector((octagonLength * 1.5) + (octagonLength / sqrt(2)) - (0.001 * inch), octagonLength * 1.5 + octagonLength / sqrt(2))
                    });
            skLineSegment(sketchStraight, "line7", {
                        "start" : vector(octagonLength * 1.5 + octagonLength / sqrt(2), (octagonLength / 2) + (octagonLength / sqrt(2)) + (0.001 * inch)),
                        "end" : vector(octagonLength * 1.5 + octagonLength / sqrt(2), (octagonLength * 1.5) + (octagonLength / sqrt(2)) - (0.001 * inch))
                    });
            skLineSegment(sketchStraight, "line9", {
                        "start" : vector((octagonLength / 2) - (0.001 * inch), octagonLength * 1.5 + octagonLength / sqrt(2) * 2),
                        "end" : vector(0 * octagonLength, octagonLength * 1.5 + octagonLength / sqrt(2) * 2)
                    });
            skLineSegment(sketchStraight, "line10", {
                        "start" : vector(octagonLength / 2, (octagonLength * 1.5) + ((octagonLength / sqrt(2)) * 2) + (0.001 * inch)),
                        "end" : vector(octagonLength / 2, octagonLength * 2 + octagonLength / sqrt(2) * 2)
                    });
            skLineSegment(sketchStraight, "line12", {
                        "start" : vector((octagonLength * 1.5) + ((octagonLength / sqrt(2)) * 2) + (0.001 * inch), octagonLength * 1.5 + octagonLength / sqrt(2) * 2),
                        "end" : vector(octagonLength * 2 + octagonLength / sqrt(2) * 2, octagonLength * 1.5 + octagonLength / sqrt(2) * 2)
                    });
            skLineSegment(sketchStraight, "line13", {
                        "start" : vector(octagonLength * 1.5 + octagonLength / sqrt(2) * 2, octagonLength * 1.5 + ((octagonLength / sqrt(2)) * 2) + (0.001 * inch)),
                        "end" : vector(octagonLength * 1.5 + octagonLength / sqrt(2) * 2, octagonLength * 2 + octagonLength / sqrt(2) * 2)
                    });
            skLineSegment(sketchStraight, "line15", {
                        "start" : vector((octagonLength * 1.5) + ((octagonLength / sqrt(2)) * 2) + (0.001 * inch), octagonLength / 2),
                        "end" : vector(octagonLength * 2 + octagonLength / sqrt(2) * 2, octagonLength / 2)
                    });
            skLineSegment(sketchStraight, "line16", {
                        "start" : vector(octagonLength * 1.5 + octagonLength / sqrt(2) * 2, (octagonLength / 2) - (0.001 * inch)),
                        "end" : vector(octagonLength * 1.5 + octagonLength / sqrt(2) * 2, 0 * octagonLength)
                    });
            
            skSolve(sketchStraight);
        
        // creates diagonal lines
        var sketchDiagonal = newSketch(context, id + "sketchDiagonal", {
                "sketchPlane" : qCreatedBy(makeId("Top"), EntityType.FACE)
            });
            
            skLineSegment(sketchDiagonal, "line3", {
                        "start" : vector(octagonLength / 2 - (1 * millimeter), octagonLength / 2 - (1 * millimeter)),
                        "end" : vector(octagonLength / 2 + octagonLength / sqrt(2) + (1 * millimeter), octagonLength / 2 + octagonLength / sqrt(2) + (1 * millimeter))
                    });
            skLineSegment(sketchDiagonal, "line8", {
                        "start" : vector(octagonLength / 2 + octagonLength / sqrt(2) + (1 * millimeter), octagonLength * 1.5 + octagonLength / sqrt(2) - (1 * millimeter)),
                        "end" : vector(octagonLength / 2 - (1 * millimeter), octagonLength * 1.5 + octagonLength / sqrt(2) * 2 + (1 * millimeter))
                    });
            skLineSegment(sketchDiagonal, "line11", {
                        "start" : vector(octagonLength * 1.5 + octagonLength / sqrt(2) - (1 * millimeter), octagonLength * 1.5 + octagonLength / sqrt(2) - (1 * millimeter)),
                        "end" : vector(octagonLength * 1.5 + octagonLength / sqrt(2) * 2 + (1 * millimeter), octagonLength * 1.5 + octagonLength / sqrt(2) * 2 + (1 * millimeter))
                    });
            skLineSegment(sketchDiagonal, "line14", {
                        "start" : vector(octagonLength * 1.5 + octagonLength / sqrt(2) - (1 * millimeter), octagonLength / 2 + octagonLength / sqrt(2) + (1 * millimeter)),
                        "end" : vector(octagonLength * 1.5 + octagonLength / sqrt(2) * 2 + (1 * millimeter), octagonLength / 2 - (1 * millimeter))
                    });
            
            skSolve(sketchDiagonal);
        
        // creates corner geometry
        var sketchCorner = newSketch(context, id + "sketchCorner", {
                "sketchPlane" : qCreatedBy(makeId("Top"), EntityType.FACE)
            });
            
            // corner 1
            skLineSegment(sketchCorner, "line21", {
                        "start" : vector(octagonLength / 2, 0 * octagonLength),
                        "end" : vector(octagonLength / 2, octagonLength / 2)
                    });
            skLineSegment(sketchCorner, "line22", {
                        "start" : vector(0 * octagonLength, octagonLength / 2),
                        "end" : vector(octagonLength / 2, octagonLength / 2)
                    });            
            skArc(sketchCorner, "arc1", {
                    "start" : vector(5, 0) * millimeter,
                    "mid" : vector(cos(45 * degree) * 5, sin(45 * degree) * 5) * millimeter,
                    "end" : vector(0, 5) * millimeter
            });
            skLineSegment(sketchCorner, "line23", {
                    "start" : vector(5, 0) * millimeter,
                    "end" : vector(octagonLength / 2, 0 * octagonLength)
            });
            skLineSegment(sketchCorner, "line24", {
                    "start" : vector(0, 5) * millimeter,
                    "end" : vector(0 * octagonLength, octagonLength / 2)
            });
            
            // corner 2
            skLineSegment(sketchCorner, "line25", {
                        "start" : vector(octagonLength / 2, octagonLength * 1.5 + octagonLength / sqrt(2) * 2),
                        "end" : vector(0 * octagonLength, octagonLength * 1.5 + octagonLength / sqrt(2) * 2)
                    });
            skLineSegment(sketchCorner, "line26", {
                        "start" : vector(octagonLength / 2, (octagonLength * 1.5) + (octagonLength / sqrt(2)) * 2),
                        "end" : vector(octagonLength / 2, octagonLength * 2 + octagonLength / sqrt(2) * 2)
                    });
            skArc(sketchCorner, "arc2", {
                    "start" : vector(0 * octagonLength, ((octagonLength * 2 + octagonLength / sqrt(2) * 2)) - (5 * millimeter)),
                    "mid" : vector(cos(45 * degree) * 5 * millimeter, (octagonLength * 2 + octagonLength / sqrt(2) * 2) - (sin(45 * degree) * 5 * millimeter)),
                    "end" : vector(5 * millimeter, (octagonLength * 2 + octagonLength / sqrt(2) * 2))
            });
            skLineSegment(sketchCorner, "line27", {
                    "start" : vector(0 * octagonLength, ((octagonLength * 2 + octagonLength / sqrt(2) * 2)) - (5 * millimeter)),
                    "end" : vector(0 * octagonLength, octagonLength * 1.5 + octagonLength / sqrt(2) * 2)
            });
            skLineSegment(sketchCorner, "line28", {
                    "start" : vector(5 * millimeter, (octagonLength * 2 + octagonLength / sqrt(2) * 2)),
                    "end" : vector(octagonLength / 2, octagonLength * 2 + octagonLength / sqrt(2) * 2)
            });
            
            // corner 3
            skLineSegment(sketchCorner, "line29", {
                        "start" : vector((octagonLength * 1.5) + ((octagonLength / sqrt(2)) * 2), octagonLength * 1.5 + octagonLength / sqrt(2) * 2),
                        "end" : vector(octagonLength * 2 + octagonLength / sqrt(2) * 2, octagonLength * 1.5 + octagonLength / sqrt(2) * 2)
                    });
            skLineSegment(sketchCorner, "line30", {
                        "start" : vector(octagonLength * 1.5 + octagonLength / sqrt(2) * 2, octagonLength * 1.5 + ((octagonLength / sqrt(2)) * 2)),
                        "end" : vector(octagonLength * 1.5 + octagonLength / sqrt(2) * 2, octagonLength * 2 + octagonLength / sqrt(2) * 2)
                    });
            skArc(sketchCorner, "arc3", {
                    "start" : vector((octagonLength * 2 + octagonLength / sqrt(2) * 2), (octagonLength * 2 + octagonLength / sqrt(2) * 2) - 5 * millimeter),
                    "mid" : vector((octagonLength * 2 + octagonLength / sqrt(2) * 2) - (cos(45 * degree) * 5 * millimeter), (octagonLength * 2 + octagonLength / sqrt(2) * 2) - (sin(45 * degree) * 5 * millimeter)),
                    "end" : vector((octagonLength * 2 + octagonLength / sqrt(2) * 2) - 5 * millimeter, (octagonLength * 2 + octagonLength / sqrt(2) * 2))
            });
            skLineSegment(sketchCorner, "line31", {
                    "start" : vector((octagonLength * 2 + octagonLength / sqrt(2) * 2), (octagonLength * 2 + octagonLength / sqrt(2) * 2) - 5 * millimeter),
                    "end" : vector(octagonLength * 2 + octagonLength / sqrt(2) * 2, octagonLength * 1.5 + octagonLength / sqrt(2) * 2)
            });
            skLineSegment(sketchCorner, "line32", {
                    "start" : vector((octagonLength * 2 + octagonLength / sqrt(2) * 2) - 5 * millimeter, (octagonLength * 2 + octagonLength / sqrt(2) * 2)),
                    "end" : vector(octagonLength * 1.5 + octagonLength / sqrt(2) * 2, octagonLength * 2 + octagonLength / sqrt(2) * 2)
            });
            
            // corner 4
            skLineSegment(sketchCorner, "line33", {
                        "start" : vector((octagonLength * 1.5) + (octagonLength / sqrt(2)) * 2, octagonLength / 2),
                        "end" : vector(octagonLength * 2 + octagonLength / sqrt(2) * 2, octagonLength / 2)
                    });
            skLineSegment(sketchCorner, "line34", {
                        "start" : vector(octagonLength * 1.5 + octagonLength / sqrt(2) * 2, octagonLength / 2),
                        "end" : vector(octagonLength * 1.5 + octagonLength / sqrt(2) * 2, 0 * octagonLength)
                    });
            skArc(sketchCorner, "arc4", {
                    "start" : vector((octagonLength * 2 + octagonLength / sqrt(2) * 2), 5 * millimeter),
                    "mid" : vector((octagonLength * 2 + octagonLength / sqrt(2) * 2) - (cos(45 * degree) * 5 * millimeter), sin(45 * degree) * 5 * millimeter),
                    "end" : vector((octagonLength * 2 + octagonLength / sqrt(2) * 2) - 5 * millimeter, 0 * octagonLength)
            });
            skLineSegment(sketchCorner, "line35", {
                    "start" : vector((octagonLength * 2 + octagonLength / sqrt(2) * 2), 5 * millimeter),
                    "end" : vector(octagonLength * 2 + octagonLength / sqrt(2) * 2, octagonLength / 2)
            });
            skLineSegment(sketchCorner, "line36", {
                    "start" : vector((octagonLength * 2 + octagonLength / sqrt(2) * 2) - 5 * millimeter, 0 * octagonLength),
                    "end" : vector(octagonLength * 1.5 + octagonLength / sqrt(2) * 2, 0 * octagonLength)
            });
            
            skSolve(sketchCorner);
        
        var sample = (octagonLength * 2 + octagonLength / sqrt(2) * 2);
        var repeatLength = baseLength / sample;
        var repeatWidth = baseWidth / sample;
        
        var roundedRepeatLength = floor(repeatLength);
        var roundedRepeatWidth = floor(repeatWidth);
        
        // base structure
        extrude(context, id + "extrudeSample", {
                "bodyType" : ExtendedToolBodyType.THIN,
                "depth" : baseHeight,
                "wallShape": qUnion([qCreatedBy(id + "sketchStraight", EntityType.EDGE), qCreatedBy(id + "sketchDiagonal", EntityType.EDGE)]),
                "thickness1" : strut / 2,
                "thickness2" : strut / 2
        });
        
        // center structure
        fCuboid(context, id + "cuboidCenter", {
                "corner1" : vector((octagonLength / 2) + (octagonLength / sqrt(2)), octagonLength / 2 + octagonLength / sqrt(2), 0 * inch),
                "corner2" : vector((octagonLength * 1.5) + (octagonLength / sqrt(2)), octagonLength * 1.5 + octagonLength / sqrt(2), baseHeight)
        });
        
        if (baseHeight > 5 * millimeter) {
            fCylinder(context, id + "cylinderCenter", {
                    "topCenter" : vector(octagonLength + (octagonLength / sqrt(2)), octagonLength + octagonLength / sqrt(2), baseHeight),
                    "bottomCenter" : vector(octagonLength + (octagonLength / sqrt(2)), octagonLength + octagonLength / sqrt(2), baseHeight - (5 * millimeter)),
                    "radius" : 5 * millimeter
            });
        } else {
            fCylinder(context, id + "cylinderCenter", {
                    "topCenter" : vector(octagonLength + (octagonLength / sqrt(2)), octagonLength + octagonLength / sqrt(2), baseHeight),
                    "bottomCenter" : vector(octagonLength + (octagonLength / sqrt(2)), octagonLength + octagonLength / sqrt(2), 0 * millimeter),
                    "radius" : 5 * millimeter
            });
        }
        
        opBoolean(context, id + "booleanCenter", {
                "tools" : qCreatedBy(id + "cylinderCenter", EntityType.BODY),
                "targets" : qCreatedBy(id + "cuboidCenter", EntityType.BODY),
                "operationType" : BooleanOperationType.SUBTRACTION
        });
        
        // corner structure
        extrude(context, id + "extrudeCorner", {
                "entities" : qSketchRegion(id + "sketchCorner"),
                "endBound" : BoundingType.BLIND,
                "depth" : baseHeight
        });
        
        // patterns full structure
        linearPattern(context, id + "linearPatternSample", {
                "entities" : qAllModifiableSolidBodiesNoMesh(),
                "directionOne" : qCreatedBy(newId() + "Right", EntityType.FACE),
                "distance" : sample,
                "instanceCount" : roundedRepeatWidth,
                "hasSecondDir" : true,
                "directionTwo" : qCreatedBy(newId() + "Front", EntityType.FACE),
                "distanceTwo" : sample,
                "instanceCountTwo" : roundedRepeatLength,
                "oppositeDirectionTwo" : true,
                "defaultScope" : true
        });
        
        // creates excess material
        var sketchExcess = newSketchOnPlane(context, id + "sketchExcess", {
                "sketchPlane" : XY_PLANE
            });
            
            if (definition.excess == Excess.RIGHT) {
                fCuboid(context, id + "cuboidBase", {
                            "corner1" : vector(0, 0, 0) * inch,
                            "corner2" : vector(roundedRepeatWidth * sample, roundedRepeatLength * sample, baseHeight)
                        });
                
                fCuboid(context, id + "cuboidFull", {
                            "corner1" : vector(0, 0, 0) * inch,
                            "corner2" : vector(baseWidth, baseLength, baseHeight)
                        });
                
                opBoolean(context, id + "booleanExcess", {
                            "tools" : qCreatedBy(id + "cuboidBase", EntityType.BODY),
                            "targets" : qCreatedBy(id + "cuboidFull", EntityType.BODY),
                            "operationType" : BooleanOperationType.SUBTRACTION
                        });
                
            } else if (definition.excess == Excess.LEFT) {
                fCuboid(context, id + "cuboidBase", {
                            "corner1" : vector(0, 0, 0) * inch,
                            "corner2" : vector(roundedRepeatWidth * sample, roundedRepeatLength * sample, baseHeight)
                        });
                
                fCuboid(context, id + "cuboidFull", {
                            "corner1" : vector((roundedRepeatWidth * sample) - baseWidth, baseLength, baseHeight),
                            "corner2" : vector(roundedRepeatWidth * sample, 0 * octagonLength, 0 * octagonLength)
                        });
                
                opBoolean(context, id + "booleanExcess", {
                            "tools" : qCreatedBy(id + "cuboidBase", EntityType.BODY),
                            "targets" : qCreatedBy(id + "cuboidFull", EntityType.BODY),
                            "operationType" : BooleanOperationType.SUBTRACTION
                        });
            }
            
            skSolve(sketchExcess);
        
        // unions everything into one object
        opBoolean(context, id + "booleanAll", {
                "tools" : qAllModifiableSolidBodiesNoMesh(),
                "operationType" : BooleanOperationType.UNION
        });
        
        // deletes all sketches
        opDeleteBodies(context, id + "deleteBodiesAll", {
                "entities" : qSketchFilter(qEverything(EntityType.BODY), SketchObject.YES)
        });
    });
